bool is_sorted(int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
    for (int i = lower; i < upper-1; i++)
    //@loop_invariant lower <= i;
        if (!(A[i] <= A[i+1]))
            return false;
    return true;
}

bool is_in(int x, int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
    if (lower == upper) return false;
    return A[lower] == x || is_in(x, A, lower + 1, upper);
}

int search(int x, int[] A, int n)
//@requires n == \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (\result == -1 && !is_in(x, A, 0, n)) 
        || (0 <= \result && \result < n && A[\result] == x); @*/
{
    int lower = 0;
    int upper = n;
    while (lower < upper)
    //@loop_invariant 0 <= lower && lower <= upper && upper <= n;
    //@loop_invariant !is_in(x, A, 0, lower);
    //@loop_invariant !is_in(x, A, upper, n);
    {
        int mid = lower + (upper - lower)/2;
        //@assert lower <= mid && mid < upper;
        if (A[mid] == x) return mid;
        if (A[mid] < x) {
            //@assert mid + 1 <= upper;
            //@assert !is_in(x, A, 0, mid + 1);
            lower = mid + 1;
        } else { //@assert A[mid] > x;
            //@assert !is_in(x, A, mid, n);
            upper = mid;
        }
    }
    //@assert lower == upper;
    //@assert !is_in(x, A, 0, n);
    return -1;
}