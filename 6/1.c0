bool is_sorted(int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
    for (int i = lower; i < upper-1; i++)
    //@loop_invariant lower <= i;
        if (!(A[i] <= A[i+1]))
            return false;
    return true;
}

bool is_in(int x, int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
    if (lower == upper) return false;
    return A[lower] == x || is_in(x, A, lower + 1, upper);
}

int binsearch_inclusive(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
        || ((0 <= \result && \result < n) && A[\result] == x);
  @*/
{
    int lower = 0;
    int upper = n - 1;
    while (lower <= upper)
    //@loop_invariant 0 <= lower && lower <= upper + 1 && upper < n;
    //@loop_invariant (lower == 0 || A[lower - 1] < x);
    //@loop_invariant (upper == n - 1 || A[upper + 1] > x);
    {
        int mid = lower + (upper - lower) / 2;
        //@assert lower <= mid && mid <= upper;
        if (A[mid] == x) return mid;
        else if (A[mid] < x) lower = mid + 1;
        else /*@assert(A[mid] > x);@*/
            upper = mid - 1;
    }
    //@assert upper + 1 == lower;
    return -1;
}
