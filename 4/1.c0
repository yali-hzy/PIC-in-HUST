int[] array_part(int[] A, int i, int j)
//@requires 0 <= i && i <= j && j < \length(A);
//@ensures \length(\result) == j - i + 1;
{
    int[] B = alloc_array(int, j - i + 1);
    for (int k = 0; k <= j - i; k++)
    //@loop_invariant k >= 0;
    {
        B[k] = A[k + i]; 
    }
    return B;
}

/*
To show:
 - j - i + 1 >= 0 ?             (Line 5, required by alloc_array())
    1. i <= j                   by Line 2
    2. j - i + 1 >= 0           by math on 1.

 - k + i >= 0 ?                 (Line 9, required by indices of A)
    1. i >= 0                   by Line 2
    2. k >= 0                   by Line 7
    3. k + i >= 0               by math on 1, 2.
 
 - k + i < \length(A) ?         (Line 9, required by indices of A)
    1. k <= j - i               by Line 6
    2. k + i <= j               by math on 1.
    3. j < \length(A)           by Line 2
    4. k + i < \length(A)       by math on 2, 3.

 - k >= 0 ?                     (Line 9, required by indices of B)
    1. k >= 0                   by Line 7

 - k < \length(B) ?             (Line 9, required by indices of B)
    1. \length(B) == j - i + 1  by Line 5
    2. k <= j - i               by Line 6
    3. k < \length(B)           by math on 1, 2.

 - k >= 0 ?                     (Line 7, loop invariant)
    INIT: k = 0 >= 0            by math on Line 6
    PRES: k >= 0 is preserved
        To show: if k >= 0, then k' >= 0
            1. k' = k + 1               by Line 6
            2. k >= 0                   assumption
            3. k + 1 >= 0               by math on 2.
                only if k != int_max()  by two's compl.
            4. k < \length(B)           by Line 6
            5. k != int_max()           by math on 4.
            6. k' >= 0                  by math on 1, 3, 5.

*/